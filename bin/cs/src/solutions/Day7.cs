// Generated by Haxe 4.1.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace solutions {
	public class Day7 : global::haxe.lang.HxObject {
		
		static Day7() {
			global::solutions.Day7.input = global::sys.io.File.getContent("E:/Mila/Documents/GitHub/adventofcode2020/src/inputs/Day7.txt");
		}
		
		
		public Day7(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Day7() {
			global::solutions.Day7.__hx_ctor_solutions_Day7(this);
		}
		
		
		protected static void __hx_ctor_solutions_Day7(global::solutions.Day7 __hx_this) {
		}
		
		
		public static string input;
		
		public static global::haxe.ds.StringMap<string> bagMap;
		
		public static void solve() {
			unchecked {
				global::System.Console.WriteLine(((object) ("Solving Day7") ));
				global::Array<string> arr = global::haxe.lang.StringExt.split(global::solutions.Day7.input, "\r\n");
				global::solutions.Day7.bagMap = new global::haxe.ds.StringMap<string>();
				{
					int _g = 0;
					while (( _g < arr.length )) {
						string rule = arr[_g];
						 ++ _g;
						global::Array<string> ruleSplit = global::haxe.lang.StringExt.split(rule, "contain");
						{
							global::haxe.IMap<string, string> this1 = global::solutions.Day7.bagMap;
							string k = global::haxe.lang.StringExt.split(ruleSplit[0], "bags")[0].TrimEnd();
							string v = ruleSplit[1];
							((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (this1) ))) ).@set(k, v);
						}
						
					}
					
				}
				
				global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("a: ", global::haxe.lang.Runtime.toString(global::solutions.Day7.matchBags("shiny gold", new global::Array<string>(), 0)))) ));
				global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("b: ", global::haxe.lang.Runtime.toString(global::solutions.Day7.countBags("shiny gold", 1)))) ));
			}
		}
		
		
		public static int matchBags(string bagName, global::Array<string> checkedBags, int depth) {
			unchecked {
				int count = 0;
				{
					object bagKey = ((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<string>(((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (global::solutions.Day7.bagMap) )) ))) ))) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(bagKey, "hasNext", 407283053, null))) {
						string bagKey1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(bagKey, "next", 1224901875, null));
						if ((  ! (checkedBags.contains(bagKey1))  && ( global::haxe.lang.StringExt.indexOf(global::haxe.lang.Runtime.toString((((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (global::solutions.Day7.bagMap) )) ))) ).@get(bagKey1)).toDynamic()), bagName, default(global::haxe.lang.Null<int>)) > -1 ) )) {
							count += ( 1 + global::solutions.Day7.matchBags(bagKey1, checkedBags,  ++ depth) );
							checkedBags.push(bagKey1);
						}
						
					}
					
				}
				
				return count;
			}
		}
		
		
		public static int countBags(string bagName, int multiplier) {
			unchecked {
				int count = 0;
				global::EReg bagRegex = new global::EReg("(bag)s?,?", "");
				global::Array<string> childBagArr = new global::Array<string>(new string[]{});
				string input = global::haxe.lang.Runtime.toString((((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (global::solutions.Day7.bagMap) )) ))) ).@get(bagName)).toDynamic());
				while (bagRegex.match(input)) {
					string curr = bagRegex.matchedLeft().Trim();
					if (( global::haxe.lang.StringExt.indexOf(curr, "other", default(global::haxe.lang.Null<int>)) > -1 )) {
						break;
					}
					
					childBagArr.push(curr);
					input = bagRegex.matchedRight();
				}
				
				{
					int _g = 0;
					while (( _g < childBagArr.length )) {
						string bag = childBagArr[_g];
						 ++ _g;
						global::haxe.lang.Null<int> @value = global::Std.parseInt(global::haxe.lang.StringExt.charAt(bag, 0));
						count += ( multiplier * (@value).@value );
						count += global::solutions.Day7.countBags(global::haxe.lang.StringExt.substr(bag, 2, default(global::haxe.lang.Null<int>)), ( multiplier * (@value).@value ));
					}
					
				}
				
				return count;
			}
		}
		
		
	}
}


