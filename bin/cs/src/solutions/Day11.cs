// Generated by Haxe 4.1.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace solutions {
	public class Day11 : global::haxe.lang.HxObject {
		
		static Day11() {
			global::solutions.Day11.input = global::sys.io.File.getContent("E:/Mila/Documents/GitHub/adventofcode2020/src/inputs/Day11.txt");
			global::solutions.Day11.seatGrid = global::haxe.lang.StringExt.split(global::solutions.Day11.input, "\r\n");
			global::solutions.Day11.occupiedSeats = 0;
		}
		
		
		public Day11(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Day11() {
			global::solutions.Day11.__hx_ctor_solutions_Day11(this);
		}
		
		
		protected static void __hx_ctor_solutions_Day11(global::solutions.Day11 __hx_this) {
		}
		
		
		public static string input;
		
		public static global::Array<string> seatGrid;
		
		public static int occupiedSeats;
		
		public static void solve() {
			unchecked {
				global::System.Console.WriteLine(((object) ("Solving Day11") ));
				while (( global::solutions.Day11.iterateSeating(1, 4) > 0 )) {
				}
				
				global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("a: ", global::haxe.lang.Runtime.toString(global::solutions.Day11.occupiedSeats))) ));
				global::solutions.Day11.seatGrid = global::haxe.lang.StringExt.split(global::solutions.Day11.input, "\r\n");
				global::solutions.Day11.occupiedSeats = 0;
				while (( global::solutions.Day11.iterateSeating(100, 5) > 0 )) {
				}
				
				global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("b: ", global::haxe.lang.Runtime.toString(global::solutions.Day11.occupiedSeats))) ));
			}
		}
		
		
		public static int iterateSeating(int distanceToNeighbors, int occupancyTolerance) {
			unchecked {
				global::Array<string> newSeatGrid = global::solutions.Day11.seatGrid.copy();
				int seatsChanged = 0;
				int occupiedNeighbors = default(int);
				{
					int _g = 0;
					int _g1 = global::solutions.Day11.seatGrid.length;
					while (( _g < _g1 )) {
						int row = _g++;
						{
							int _g2 = 0;
							int _g3 = global::solutions.Day11.seatGrid[0].Length;
							while (( _g2 < _g3 )) {
								int col = _g2++;
								occupiedNeighbors = global::solutions.Day11.getNeighbors(row, col, distanceToNeighbors);
								if (( ( global::haxe.lang.StringExt.charAt(global::solutions.Day11.seatGrid[row], col) == "L" ) && ( occupiedNeighbors == 0 ) )) {
									newSeatGrid[row] = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(newSeatGrid[row], 0, new global::haxe.lang.Null<int>(col, true)), "#"), global::haxe.lang.StringExt.substr(newSeatGrid[row], ( col + 1 ), default(global::haxe.lang.Null<int>)));
									 ++ seatsChanged;
									global::solutions.Day11.occupiedSeats++;
								}
								else if (( ( global::haxe.lang.StringExt.charAt(global::solutions.Day11.seatGrid[row], col) == "#" ) && ( occupiedNeighbors >= occupancyTolerance ) )) {
									newSeatGrid[row] = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.StringExt.substr(newSeatGrid[row], 0, new global::haxe.lang.Null<int>(col, true)), "L"), global::haxe.lang.StringExt.substr(newSeatGrid[row], ( col + 1 ), default(global::haxe.lang.Null<int>)));
									 ++ seatsChanged;
									global::solutions.Day11.occupiedSeats--;
								}
								
							}
							
						}
						
					}
					
				}
				
				global::solutions.Day11.seatGrid = newSeatGrid.copy();
				return seatsChanged;
			}
		}
		
		
		public static int getNeighbors(int row, int col, int distance) {
			unchecked {
				int occupiedVisibleNeighbors = 0;
				{
					{
						if (global::solutions.Day11.castVision(row, col, -1, -1, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
						if (global::solutions.Day11.castVision(row, col, -1, 0, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
						if (global::solutions.Day11.castVision(row, col, -1, 1, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
					}
					
					{
						if (global::solutions.Day11.castVision(row, col, 0, -1, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
						if (global::solutions.Day11.castVision(row, col, 0, 1, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
					}
					
					{
						if (global::solutions.Day11.castVision(row, col, 1, -1, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
						if (global::solutions.Day11.castVision(row, col, 1, 0, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
						if (global::solutions.Day11.castVision(row, col, 1, 1, distance)) {
							 ++ occupiedVisibleNeighbors;
						}
						
					}
					
				}
				
				return occupiedVisibleNeighbors;
			}
		}
		
		
		public static bool castVision(int row, int col, int dRow, int dCol, int distance) {
			unchecked {
				bool occupiedSeatInView = false;
				int currRow = ( row + dRow );
				int currCol = ( col + dCol );
				int currDist = 0;
				while (( ( ( ( ( currRow > -1 ) && ( currRow < global::solutions.Day11.seatGrid.length ) ) && ( currCol > -1 ) ) && ( currCol < global::solutions.Day11.seatGrid[0].Length ) ) && ( currDist < distance ) )) {
					if (( global::haxe.lang.StringExt.charAt(global::solutions.Day11.seatGrid[currRow], currCol) == "#" )) {
						return true;
					}
					else if (( global::haxe.lang.StringExt.charAt(global::solutions.Day11.seatGrid[currRow], currCol) == "L" )) {
						return false;
					}
					
					currRow += dRow;
					currCol += dCol;
					 ++ currDist;
				}
				
				return occupiedSeatInView;
			}
		}
		
		
		public static void drawGrid() {
			{
				int _g = 0;
				global::Array<string> _g1 = global::solutions.Day11.seatGrid;
				while (( _g < _g1.length )) {
					string row = _g1[_g];
					 ++ _g;
					global::System.Console.WriteLine(((object) (row) ));
				}
				
			}
			
			global::System.Console.WriteLine(((object) ("") ));
		}
		
		
	}
}


