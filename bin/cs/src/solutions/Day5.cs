// Generated by Haxe 4.1.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace solutions {
	public class Day5 : global::haxe.lang.HxObject {
		
		static Day5() {
			global::solutions.Day5.input = global::sys.io.File.getContent("E:/Mila/Documents/GitHub/adventofcode2020/src/inputs/Day5.txt");
			global::solutions.Day5.seatExists = new global::Array<bool>(new bool[]{});
		}
		
		
		public Day5(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Day5() {
			global::solutions.Day5.__hx_ctor_solutions_Day5(this);
		}
		
		
		protected static void __hx_ctor_solutions_Day5(global::solutions.Day5 __hx_this) {
		}
		
		
		public static string input;
		
		public static global::Array<bool> seatExists;
		
		public static void solve() {
			unchecked {
				global::System.Console.WriteLine(((object) ("Solving Day5") ));
				global::Array<string> arr = global::haxe.lang.StringExt.split(global::solutions.Day5.input, "\r\n");
				global::solutions.Day5.seatExists.resize(1023);
				int maxPass = 0;
				{
					int _g = 0;
					while (( _g < arr.length )) {
						string pass = arr[_g];
						 ++ _g;
						int curr = global::solutions.Day5.processBoardingPass(pass);
						if (( curr > maxPass )) {
							maxPass = curr;
						}
						
					}
					
				}
				
				global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("a: ", global::haxe.lang.Runtime.toString(maxPass))) ));
				{
					int _g1 = 1;
					while (( _g1 < 1023 )) {
						int i = _g1++;
						if (( (  ! (global::solutions.Day5.seatExists[i])  && global::solutions.Day5.seatExists[( i - 1 )] ) && global::solutions.Day5.seatExists[( i + 1 )] )) {
							global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("b: ", global::haxe.lang.Runtime.toString(i))) ));
							return;
						}
						
					}
					
				}
				
			}
		}
		
		
		public static int processBoardingPass(string pass) {
			unchecked {
				global::Array<int> rowRange = new global::Array<int>(new int[]{0, 127});
				int power = 64;
				{
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 0) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 1) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 2) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 3) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 4) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 5) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 6) == "F" )) {
							rowRange = new global::Array<int>(new int[]{rowRange[0], ( rowRange[1] - power )});
						}
						else {
							rowRange = new global::Array<int>(new int[]{( rowRange[0] + power ), rowRange[1]});
						}
						
						power >>= 1;
					}
					
				}
				
				global::Array<int> colRange = new global::Array<int>(new int[]{0, 7});
				power = 4;
				{
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 7) == "L" )) {
							colRange = new global::Array<int>(new int[]{colRange[0], ( colRange[1] - power )});
						}
						else {
							colRange = new global::Array<int>(new int[]{( colRange[0] + power ), colRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 8) == "L" )) {
							colRange = new global::Array<int>(new int[]{colRange[0], ( colRange[1] - power )});
						}
						else {
							colRange = new global::Array<int>(new int[]{( colRange[0] + power ), colRange[1]});
						}
						
						power >>= 1;
					}
					
					{
						if (( global::haxe.lang.StringExt.charAt(pass, 9) == "L" )) {
							colRange = new global::Array<int>(new int[]{colRange[0], ( colRange[1] - power )});
						}
						else {
							colRange = new global::Array<int>(new int[]{( colRange[0] + power ), colRange[1]});
						}
						
						power >>= 1;
					}
					
				}
				
				int id = ( ( rowRange[0] * 8 ) + colRange[0] );
				global::solutions.Day5.seatExists[id] = true;
				return id;
			}
		}
		
		
	}
}


