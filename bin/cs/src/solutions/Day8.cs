// Generated by Haxe 4.1.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace solutions {
	public class Day8 : global::haxe.lang.HxObject {
		
		static Day8() {
			unchecked{
				global::solutions.Day8.input = global::sys.io.File.getContent("E:/Mila/Documents/GitHub/adventofcode2020/src/inputs/Day8.txt");
				global::solutions.Day8.loopNodes = new global::haxe.ds.IntMap<int>();
				global::solutions.Day8.loopEnd = -1;
			}
		}
		
		
		public Day8(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Day8() {
			global::solutions.Day8.__hx_ctor_solutions_Day8(this);
		}
		
		
		protected static void __hx_ctor_solutions_Day8(global::solutions.Day8 __hx_this) {
		}
		
		
		public static string input;
		
		public static global::Array<string> instructions;
		
		public static global::haxe.ds.IntMap<int> loopNodes;
		
		public static int loopEnd;
		
		public static void solve() {
			unchecked {
				global::System.Console.WriteLine(((object) ("Solving Day8") ));
				global::solutions.Day8.instructions = global::haxe.lang.StringExt.split(global::solutions.Day8.input, "\r\n");
				global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("a: ", global::haxe.lang.Runtime.toString(global::solutions.Day8.runInstructions(0, 0, false)[0]))) ));
				{
					object key = ((object) (new global::haxe.ds._IntMap.IntMapKeyIterator<int>(((global::haxe.ds.IntMap<int>) (global::haxe.ds.IntMap<object>.__hx_cast<int>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, int>) (global::solutions.Day8.loopNodes) )) ))) ))) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(key, "hasNext", 407283053, null))) {
						int key1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(key, "next", 1224901875, null))) );
						global::Array<int> resultArr = global::solutions.Day8.runInstructions(key1, (((global::haxe.ds.IntMap<int>) (global::haxe.ds.IntMap<object>.__hx_cast<int>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, int>) (global::solutions.Day8.loopNodes) )) ))) ).@get(key1)).@value, true);
						if (( resultArr[1] > -1 )) {
							global::System.Console.WriteLine(((object) (global::haxe.lang.Runtime.concat("b: ", global::haxe.lang.Runtime.toString(resultArr[0]))) ));
							break;
						}
						
					}
					
				}
				
			}
		}
		
		
		public static global::Array<int> runInstructions(int startIndex, int accumulator, bool flip) {
			unchecked {
				int opPointer = startIndex;
				global::Array<int> opHistory = new global::Array<int>();
				int programTerminated = -1;
				while ( ! (opHistory.contains(opPointer)) ) {
					if (( opPointer == global::solutions.Day8.instructions.length )) {
						programTerminated = 1;
						break;
					}
					
					if (( ( global::solutions.Day8.loopEnd > -1 ) && ( opPointer == global::solutions.Day8.loopEnd ) )) {
						break;
					}
					
					global::Array<string> instructionArr = global::haxe.lang.StringExt.split(global::solutions.Day8.instructions[opPointer], " ");
					if (( flip && ( opPointer == startIndex ) )) {
						if (( global::haxe.lang.StringExt.indexOf(instructionArr[0], "jmp", default(global::haxe.lang.Null<int>)) > -1 )) {
							instructionArr[0] = "nop";
						}
						else if (( global::haxe.lang.StringExt.indexOf(instructionArr[0], "nop", default(global::haxe.lang.Null<int>)) > -1 )) {
							instructionArr[0] = "jmp";
						}
						
					}
					
					opHistory.push(opPointer);
					switch (instructionArr[0]) {
						case "acc":
						{
							accumulator += (global::Std.parseInt(instructionArr[1])).@value;
							 ++ opPointer;
							break;
						}
						
						
						case "jmp":
						{
							if (( startIndex == 0 )) {
								((global::haxe.ds.IntMap<int>) (global::haxe.ds.IntMap<object>.__hx_cast<int>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, int>) (global::solutions.Day8.loopNodes) )) ))) ).@set(opPointer, accumulator);
							}
							
							opPointer += (global::Std.parseInt(instructionArr[1])).@value;
							break;
						}
						
						
						case "nop":
						{
							if (( startIndex == 0 )) {
								((global::haxe.ds.IntMap<int>) (global::haxe.ds.IntMap<object>.__hx_cast<int>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, int>) (global::solutions.Day8.loopNodes) )) ))) ).@set(opPointer, accumulator);
							}
							
							 ++ opPointer;
							break;
						}
						
						
						default:
						{
							global::System.Console.WriteLine(((object) ("Bad instruction") ));
							break;
						}
						
					}
					
				}
				
				if (( ( startIndex == 0 ) && ( programTerminated < 1 ) )) {
					global::solutions.Day8.loopEnd = opPointer;
				}
				
				return new global::Array<int>(new int[]{accumulator, programTerminated});
			}
		}
		
		
	}
}


